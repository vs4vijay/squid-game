@RestControllerAdvice
public class GlobalExceptionHandler{


    @ExceptionHandler(value = Exception.class)
    public String handleException(Exception e)
    {
        return "Exception: " + e.getMessage();
    }

       @ExceptionHandler(Exception.class)
        @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
        @ResponseBody
        public ErrorResponse<List<StackTraceElement>> processAllError(Exception ex) {
            List<StackTraceElement> ele = null;
            if (stackTrace == true) {
                ele = Arrays.asList(ex.getStackTrace());
            }
            ErrorResponse<List<StackTraceElement>> response = new ErrorResponse<>(ele, ex.getMessage());
            return response;
        }


    @ExceptionHandler(value = ArithmeticException.class)
    @ResponseStatus(value = HttpStatus.BAD_REQUEST)
    public String handleArithmeticException(ArithmeticException e)
    {
        return "ArithmeticException: " + e.getMessage();
    }

}

///

@RestControllerAdvice
public class ControllerExceptionHandler {

  @ExceptionHandler(value = {ResourceNotFoundException.class, CertainException.class})
  @ResponseStatus(value = HttpStatus.NOT_FOUND)
  public ErrorMessage resourceNotFoundException(ResourceNotFoundException ex, WebRequest request) {
    ErrorMessage message = new ErrorMessage(
        status,
        date,
        ex.getMessage(),
        description);

    return message;
  }
}
